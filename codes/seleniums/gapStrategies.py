from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
import time

# Selenium WebDriver 설정
options = webdriver.ChromeOptions()
options.add_argument('--headless')  # 헤드리스 모드로 실행 (화면 표시 없음)
driver = webdriver.Chrome(options=options)

# URL을 구성할 ID 리스트
jiho = [
    361580, 284980, 475720, 148020, 464540, 483230, 448600, 465330, 422420, 105780,
    469070, 477080, 290130, 367760, 367770, 427110, 388280, 427120, 326240, 385560,
    479520, 469580, 270800, 292050, 442550, 442560, 442570, 234310, 241390, 401170,
    300640, 266160, 481430, 114100, 276650, 437370, 375270, 475380, 411720, 476310,
    417450, 442320, 461490, 459750, 399580, 336160, 326230, 272560, 385550, 196230,
    315960, 455890, 481340, 472870, 472830, 485690, 379780, 453330, 460660, 219390,
    354240, 368590, 437350, 455960, 469060, 469050, 449580, 446700, 475350, 388420,
    448630, 140570, 140580, 379790, 488480, 385540, 183710, 310080, 463300, 174360,
    136340, 281990, 272570, 250730, 371150, 183700, 270810, 302450, 253280, 253290,
    310960, 227550, 227560, 102110, 252000, 315270, 289480, 227540, 447820, 470260,
    453540, 480260, 364980, 462010, 305540, 471760, 365040, 364960, 475630, 357870,
    400970, 396500, 377990, 417630, 292160, 404540, 300610, 138530, 445910, 289260,
    289250, 310970, 143850, 269370, 292150, 453950, 364990, 139280, 237440, 160580,
    114820, 464310, 466950, 387270, 440340, 412770, 476690, 418670, 480310, 371450,
    248270, 464930, 272580, 157450, 105010, 341850, 329200, 147970, 458250, 476550,
    482730, 448290, 488500, 429000, 360750, 486290, 435420, 448300, 133690, 441680,
    429010, 245340, 456610, 329750, 458750, 458760, 458730, 465670, 381170, 472160,
    474220, 472170, 458260, 381180, 228810, 364970, 91230, 98560, 472150, 138520,
    157490, 463250, 228800, 227570, 261140, 245350, 91220, 466940, 307510, 453870,
    479730, 365000, 241180, 465660, 150460, 302190, 157500, 307520, 117690, 245360,
    414780, 371470, 396520, 371460, 396510, 371160, 166400, 232080, 261060, 261070,
    461580, 277640, 277650, 277630, 376410, 447770, 438330, 387280, 449690, 449680,
    143860, 138540, 228790, 394670, 394660, 276000, 449170, 471780, 139260, 139220,
    139290, 139270, 139250, 139230, 139240, 228820, 182480, 451530, 203780, 182490,
    174350, 275980, 211560, 195930, 195920, 451540, 192090, 210780, 481050, 278530,
    226980, 337160, 363580, 337150, 223190, 237350, 252650, 465680, 476810, 467940,
    473290, 305720, 461950, 457690, 457700, 471990, 487240, 459580, 439860, 266370,
    101280, 368680, 445290, 401470, 385520, 385510, 373490, 445150, 423160, 292190,
    229720, 289040, 156080, 278540, 275280, 275290, 275300, 269420, 433970, 433980,
    434060, 329650, 329660, 329670, 395170, 315930, 468380, 300950, 266390, 279530,
    471230, 439870, 114260, 276990, 476070, 102960, 404260, 273140, 487950, 488770,
    337120, 244620, 481060, 484790, 487230, 483280, 485540, 428560, 379800, 453660,
    453650, 276970, 200030, 218420, 463640, 449180, 463690, 463680, 453630, 453640,
    379810, 449190, 455030, 280930, 411420, 390390, 483290, 489250, 441640, 352560,
    314250, 473460, 390400, 437080, 419420, 266360, 244580, 91160, 325020, 211900,
    237370, 244670, 102780, 448330, 251350, 325010, 395160, 446690, 437070, 395150,
    456250, 91170, 453810, 477730, 352540, 91180, 363570, 273130, 102970, 419430,
    283580, 169950, 99140, 415340, 428510, 256750, 372330, 279540, 229200, 461450,
    226490, 359210, 337140, 244660, 375770, 459560, 475080, 266410, 298770, 476800,
    450190, 450180, 266420, 364690, 69500, 284430, 321410, 219480, 468370, 468630,
    117700, 214980, 153130, 185680, 140700, 213610, 117460, 140710, 117680, 411540,
    295040, 469820, 462540, 455860, 455850, 444200, 363510, 292500, 404650, 438570,
    474390, 438560, 484880, 484890, 461600, 473330, 479620, 481180, 486450, 433330,
    399110, 447620, 476030, 446720, 481190, 475300, 475310, 464610, 466930, 464600,
    466920, 220130, 415760, 413220, 469830, 450910, 423170, 429980, 429990, 452360,
    436140, 153270, 148070, 294400, 69660, 460280, 331910, 488200, 488210, 469790,
    100910, 200250, 450120, 104530, 114470, 473490, 473500, 130730, 411860, 430500,
    426330, 449770, 449780, 453080, 373790, 483030, 474800, 104520, 483020, 441330,
    454180, 316670, 467540, 122260, 394340, 464230, 467620, 464240, 458210, 435530,
    435540, 435550, 471460, 437550, 419890, 429870, 476450, 460270, 459790, 454780,
    394350, 441800, 463050, 404120, 385710, 410870, 456600, 485810, 478150, 426020,
    426030, 385720, 473440, 332500, 105190, 448880, 461260, 461270, 475260, 385600,
    475270, 475280, 469150, 487340, 385590, 380340, 414270, 356540, 475050, 411060,
    277540, 483340, 114460, 365780, 411050, 446770, 435040, 460960, 181480, 190620,
    440640, 265690, 483330, 291130, 476760, 453850, 476750, 480030, 280320, 360200,
    438080, 309230, 367380, 438100, 456880, 440650, 480040, 402970, 480020, 465580,
    473590, 391600, 455660, 143460, 245710, 131890, 108450, 226380, 316300, 483420,
    483320, 448540, 433500, 256440, 238720, 469160, 447430, 416090, 168580, 272910,
    371870, 354500, 305050, 457480, 469170, 261920, 152100, 395750, 395760, 436180,
    453010, 227830, 122090, 333940, 333950, 333960, 333970, 333980, 429740, 449450,
    269540, 269530, 433850, 433860, 433870, 433880, 251590, 161510, 489030, 251600,
    461460, 451600, 489010, 438210, 442580, 419650, 415920, 278620, 477050, 429760,
    287180, 332610, 456200, 426410, 332620, 464470, 461900, 238670, 256450, 447660,
    239660, 421320, 464920, 489000, 451000, 280920, 266550, 301410, 301400, 328370,
    457990, 213630, 189400, 195970, 195980
]

# 데이터를 저장할 리스트
data = []

# 각 ID로 URL을 구성하여 데이터 수집

def main():

    for stock_id in jiho:
        url = f"https://tossinvest.com/stocks/{stock_id}/analytics?menu=evaluation"
        
        driver.get(url)
        
        # 페이지 로드 대기
        time.sleep(2)  # 네트워크 상황에 따라 조정 가능

        try:
            # 괴리율 요소 찾기
            gap_element = driver.find_element(By.CSS_SELECTOR, "div:nth-child(3) > div._13kfxo43 > span")
            gap_value = gap_element.text
            data.append(gap_value)
            print("Ok")
        except NoSuchElementException:
            # 요소를 찾지 못하면 다음 ID로 넘어가기
            continue
    return

if __name__ == '__main__':
    main()
    pass

# 결과 출력
# data.sort()
# print(data)

final_list = zip(jiho,data)
print(final_list)
# dict 
print("Line")
# WebDriver 종료
driver.quit()



# ----------------

# import requests
# from bs4 import BeautifulSoup
# import time

# # URL을 구성할 ID 리스트
# jiho = [
#     361580, 284980, 475720, 148020, 464540, 483230, 448600, 465330, 422420, 105780,
#     469070, 477080, 290130, 367760, 367770, 427110, 388280, 427120, 326240, 385560,
#     479520, 469580, 270800, 292050, 442550, 442560, 442570, 234310, 241390, 401170,
#     300640, 266160, 481430, 114100, 276650, 437370, 375270, 475380, 411720, 476310,
#     417450, 442320, 461490, 459750, 399580, 336160, 326230, 272560, 385550, 196230,
#     315960, 455890, 481340, 472870, 472830, 485690, 379780, 453330, 460660, 219390,
#     354240, 368590, 437350, 455960, 469060, 469050, 449580, 446700, 475350, 388420,
#     448630, 140570, 140580, 379790, 488480, 385540, 183710, 310080, 463300, 174360,
#     136340, 281990, 272570, 250730, 371150, 183700, 270810, 302450, 253280, 253290,
#     310960, 227550, 227560, 102110, 252000, 315270, 289480, 227540, 447820, 470260,
#     453540, 480260, 364980, 462010, 305540, 471760, 365040, 364960, 475630, 357870,
#     400970, 396500, 377990, 417630, 292160, 404540, 300610, 138530, 445910, 289260,
#     289250, 310970, 143850, 269370, 292150, 453950, 364990, 139280, 237440, 160580,
#     114820, 464310, 466950, 387270, 440340, 412770, 476690, 418670, 480310, 371450,
#     248270, 464930, 272580, 157450, 105010, 341850, 329200, 147970, 458250, 476550,
#     482730, 448290, 488500, 429000, 360750, 486290, 435420, 448300, 133690, 441680,
#     429010, 245340, 456610, 329750, 458750, 458760, 458730, 465670, 381170, 472160,
#     474220, 472170, 458260, 381180, 228810, 364970, 91230, 98560, 472150, 138520,
#     157490, 463250, 228800, 227570, 261140, 245350, 91220, 466940, 307510, 453870,
#     479730, 365000, 241180, 465660, 150460, 302190, 157500, 307520, 117690, 245360,
#     414780, 371470, 396520, 371460, 396510, 371160, 166400, 232080, 261060, 261070,
#     461580, 277640, 277650, 277630, 376410, 447770, 438330, 387280, 449690, 449680,
#     143860, 138540, 228790, 394670, 394660, 276000, 449170, 471780, 139260, 139220,
#     139290, 139270, 139250, 139230, 139240, 228820, 182480, 451530, 203780, 182490,
#     174350, 275980, 211560, 195930, 195920, 451540, 192090, 210780, 481050, 278530,
#     226980, 337160, 363580, 337150, 223190, 237350, 252650, 465680, 476810, 467940,
#     473290, 305720, 461950, 457690, 457700, 471990, 487240, 459580, 439860, 266370,
#     101280, 368680, 445290, 401470, 385520, 385510, 373490, 445150, 423160, 292190,
#     229720, 289040, 156080, 278540, 275280, 275290, 275300, 269420, 433970, 433980,
#     434060, 329650, 329660, 329670, 395170, 315930, 468380, 300950, 266390, 279530,
#     471230, 439870, 114260, 276990, 476070, 102960, 404260, 273140, 487950, 488770,
#     337120, 244620, 481060, 484790, 487230, 483280, 485540, 428560, 379800, 453660,
#     453650, 276970, 200030, 218420, 463640, 449180, 463690, 463680, 453630, 453640,
#     379810, 449190, 455030, 280930, 411420, 390390, 483290, 489250, 441640, 352560,
#     314250, 473460, 390400, 437080, 419420, 266360, 244580, 91160, 325020, 211900,
#     237370, 244670, 102780, 448330, 251350, 325010, 395160, 446690, 437070, 395150,
#     456250, 91170, 453810, 477730, 352540, 91180, 363570, 273130, 102970, 419430,
#     283580, 169950, 99140, 415340, 428510, 256750, 372330, 279540, 229200, 461450,
#     226490, 359210, 337140, 244660, 375770, 459560, 475080, 266410, 298770, 476800,
#     450190, 450180, 266420, 364690, 69500, 284430, 321410, 219480, 468370, 468630,
#     117700, 214980, 153130, 185680, 140700, 213610, 117460, 140710, 117680, 411540,
#     295040, 469820, 462540, 455860, 455850, 444200, 363510, 292500, 404650, 438570,
#     474390, 438560, 484880, 484890, 461600, 473330, 479620, 481180, 486450, 433330,
#     399110, 447620, 476030, 446720, 481190, 475300, 475310, 464610, 466930, 464600,
#     466920, 220130, 415760, 413220, 469830, 450910, 423170, 429980, 429990, 452360,
#     436140, 153270, 148070, 294400, 69660, 460280, 331910, 488200, 488210, 469790,
#     100910, 200250, 450120, 104530, 114470, 473490, 473500, 130730, 411860, 430500,
#     426330, 449770, 449780, 453080, 373790, 483030, 474800, 104520, 483020, 441330,
#     454180, 316670, 467540, 122260, 394340, 464230, 467620, 464240, 458210, 435530,
#     435540, 435550, 471460, 437550, 419890, 429870, 476450, 460270, 459790, 454780,
#     394350, 441800, 463050, 404120, 385710, 410870, 456600, 485810, 478150, 426020,
#     426030, 385720, 473440, 332500, 105190, 448880, 461260, 461270, 475260, 385600,
#     475270, 475280, 469150, 487340, 385590, 380340, 414270, 356540, 475050, 411060,
#     277540, 483340, 114460, 365780, 411050, 446770, 435040, 460960, 181480, 190620,
#     440640, 265690, 483330, 291130, 476760, 453850, 476750, 480030, 280320, 360200,
#     438080, 309230, 367380, 438100, 456880, 440650, 480040, 402970, 480020, 465580,
#     473590, 391600, 455660, 143460, 245710, 131890, 108450, 226380, 316300, 483420,
#     483320, 448540, 433500, 256440, 238720, 469160, 447430, 416090, 168580, 272910,
#     371870, 354500, 305050, 457480, 469170, 261920, 152100, 395750, 395760, 436180,
#     453010, 227830, 122090, 333940, 333950, 333960, 333970, 333980, 429740, 449450,
#     269540, 269530, 433850, 433860, 433870, 433880, 251590, 161510, 489030, 251600,
#     461460, 451600, 489010, 438210, 442580, 419650, 415920, 278620, 477050, 429760,
#     287180, 332610, 456200, 426410, 332620, 464470, 461900, 238670, 256450, 447660,
#     239660, 421320, 464920, 489000, 451000, 280920, 266550, 301410, 301400, 328370,
#     457990, 213630, 189400, 195970, 195980
# ]

# # 데이터를 저장할 리스트
# data = []

# def main():
#     for stock_id in jiho:
#         url = f"https://tossinvest.com/stocks/{stock_id}/analytics?menu=evaluation"
        
#         # 페이지 요청
#         response = requests.get(url)
        
#         # 요청 성공 여부 확인
#         if response.status_code == 200:
#             soup = BeautifulSoup(response.text, 'html.parser')
            
#             # 괴리율 요소 찾기
#             gap_element = soup.select_one("div:nth-child(3) > div._13kfxo43 > span")
            
#             # 데이터 존재 여부 확인
#             if gap_element:
#                 gap_value = gap_element.get_text()
#                 data.append(gap_value)
#             else:
#                 # 요소를 찾지 못하면 다음 ID로 넘어가기
#                 continue
#         else:
#             print(f"Failed to retrieve data for stock ID {stock_id}")

#         # 요청 간 대기 시간 (네트워크 상황에 따라 조정 가능)
#         time.sleep(2)

# if __name__ == '__main__':
#     main()

# # 결과 출력
# data.sort()
# print(data)
